plugins {
    id "org.sonarqube" version "2.7"
}

def vJavaLang = '1.8'
def javaProjects = [ project('myreader-backend') ]

wrapper.gradleVersion = '4.4.1'

configure(allprojects) {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    idea.module {
        excludeDirs += [
                file('bin'),
                file('work'),
                file('logs'),
                file('data'),
                file('gradle'),
                file('.idea'),
                file('.settings')
        ]
    }
}

configure(javaProjects) {
    apply plugin: 'java'

    targetCompatibility = vJavaLang
    sourceCompatibility = vJavaLang

    repositories {
        mavenCentral()
    }

    // Ensure that all Gradle-compiled classes are available to Eclipse's
    // classpath.
    eclipseClasspath.dependsOn testClasses

    // Skip generation and removal of .settings/org.eclipse.jdt.core.prefs files
    // during the normal `gradle eclipse` / `gradle cleanEclipse` lifecycle, as
    // these files have been checked in with formatting settings imported from
    // style/sagan-format.xml and style/sagan.importorder.
    // See http://www.gradle.org/docs/current/userguide/eclipse_plugin.html
    eclipseJdt.onlyIf { false }
    cleanEclipseJdt.onlyIf { false }
}

subprojects {subProject ->
    afterEvaluate {
        if (subProject.plugins.hasPlugin("org.springframework.boot")){
            project(":myreader-backend") {
                libsDirName = "../../build"
                tasks.bootJar.dependsOn(copyFrontend)
            }
        }
    }
}

task copyFrontend(type: Sync, dependsOn: ':myreader-frontend:build') {
    from project(':myreader-frontend').file('dist')
    into project(':myreader-backend').buildDir.absolutePath + '/classes/java/main/static'
}

task devRun() {
    doFirst {
        project(':myreader-backend').tasks.startServer.execute()
        project(':myreader-frontend').tasks.startServer.execute()
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "MyReader"
        property "sonar.projectDescription", "MyReader is a rss reader written in Java."
        property "sonar.projectKey", "MyReader:MyReader"
        property "sonar.links.homepage", "https://github.com/ksokol/myreader"
        property "sonar.links.ci", "https://travis-ci.org/ksokol/myreader"
        property "sonar.links.issue", "https://github.com/ksokol/myreader/issues"
        property "sonar.links.scm", "https://github.com/ksokol/myreader"
        property "sonar.links.scm_dev", "scm:git:git@github.com:ksokol/myreader.git"
        property "sonar.testExecutionReportPaths", ["${project(':myreader-frontend').buildDir}/TESTS.xml"]
    }
}

project(':myreader-frontend') {
    sonarqube {
        properties {
            property "sonar.sources", "${projectDir}/src/app/js"
            property "sonar.exclusions", ["**/*.spec.js", "**/test-utils.js"]
            property "sonar.tests", ["${projectDir}/src/app/js"]
            property "sonar.test.inclusions", ["**/*.spec.js"]
            property "sonar.javascript.lcov.reportPaths", "${buildDir}/reports/coverage/lcov.info"
            property "sonar.eslint.reportPaths", "${buildDir}/reports/eslint.json"
        }
    }
}

ext.resolveDependencies = {project ->
    def resolve = {configuration ->
        def nonResolveableConfigurations = ['apiElements', 'implementation',
                                            'runtimeElements', 'runtimeOnly',
                                            'testImplementation', 'testRuntimeOnly',
                                            'generatedImplementation', 'generatedRuntimeOnly']

        if (!nonResolveableConfigurations.contains(configuration.getName())) {
            configuration.resolve()
        }
    }

    project.buildscript.configurations.each { configuration -> resolve(configuration) }
    project.configurations.each { configuration -> resolve(configuration) }
}
