buildscript {
    ext.springBootVersion = '1.4.6.RELEASE'


    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "org.sonarqube" version "2.5"
}

def vJavaLang = '1.8'
def javaProjects = [ project('myreader-backend') ]

wrapper.gradleVersion = '4.2.1'

configure(allprojects) {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    idea.module {
        excludeDirs += [
                file('bin'),      // containing build artifacts from Eclipse (if any)
                file('work'),     // containing transient artifacts used by embedded Tomcat
                file('logs'),     // containing app logs written by embedded Tomcat
                file('data'),     // containing logs and data written by elasticsearch
                file('.settings') // containing intentionally checked-in Eclipse metadata
        ]
    }
}

configure(javaProjects) {
    apply plugin: 'java'

    targetCompatibility = vJavaLang
    sourceCompatibility = vJavaLang

    repositories {
        mavenCentral()
    }

    // Ensure that all Gradle-compiled classes are available to Eclipse's
    // classpath.
    eclipseClasspath.dependsOn testClasses

    // Skip generation and removal of .settings/org.eclipse.jdt.core.prefs files
    // during the normal `gradle eclipse` / `gradle cleanEclipse` lifecycle, as
    // these files have been checked in with formatting settings imported from
    // style/sagan-format.xml and style/sagan.importorder.
    // See http://www.gradle.org/docs/current/userguide/eclipse_plugin.html
    eclipseJdt.onlyIf { false }
    cleanEclipseJdt.onlyIf { false }
}

task devRun() {
    doFirst {
        project(':myreader-backend').tasks.startServer.execute()
        project(':myreader-frontend').tasks['npm_start'].execute()
    }

    finalizedBy {
        project(':myreader-backend').tasks.stopServer.execute()
    }
}

task copyFrontend(type: Sync, dependsOn: ':myreader-frontend:build') {
    from project(':myreader-frontend').file('dist')
    into project(':myreader-backend').buildDir.absolutePath + '/classes/java/main/static'
}

project(':myreader-backend').tasks.jar.dependsOn copyFrontend

sonarqube {
    properties {
        property "sonar.projectName", "MyReader"
        property "sonar.projectDescription", "MyReader is a rss reader written in Java."
        property "sonar.projectKey", "MyReader:MyReader"
        property "sonar.links.homepage", "https://github.com/ksokol/myreader"
        property "sonar.links.ci", "https://travis-ci.org/ksokol/myreader"
        property "sonar.links.issue", "https://github.com/ksokol/myreader/issues"
        property "sonar.links.scm", "https://github.com/ksokol/myreader"
        property "sonar.links.scm_dev", "scm:git:git@github.com:ksokol/myreader.git"
    }
}
