plugins {
    id "org.sonarqube" version "2.7"
}

wrapper.gradleVersion = '5.2.1'

configure(allprojects) {
    apply plugin: 'idea'

    idea.module {
        excludeDirs += [
            file('data'),
            file('gradle'),
            file('.idea')
        ]
    }
}

subprojects {subProject ->
    afterEvaluate {
        if (subProject.plugins.hasPlugin("org.springframework.boot")){
            project(":myreader-backend") {
                libsDirName = "../../build"
                tasks.bootJar.dependsOn(copyFrontend)
            }
        }
    }
}

task copyFrontend(type: Sync, dependsOn: ':myreader-frontend:build') {
    from project(':myreader-frontend').file('dist')
    into project(':myreader-backend').buildDir.absolutePath + '/classes/java/main/static'
}

sonarqube {
    properties {
        property "sonar.projectName", "MyReader"
        property "sonar.projectDescription", "MyReader is a rss reader written in Java."
        property "sonar.projectKey", "MyReader:MyReader"
        property "sonar.links.homepage", "https://github.com/ksokol/myreader"
        property "sonar.links.ci", "https://travis-ci.org/ksokol/myreader"
        property "sonar.links.issue", "https://github.com/ksokol/myreader/issues"
        property "sonar.links.scm", "https://github.com/ksokol/myreader"
        property "sonar.links.scm_dev", "scm:git:git@github.com:ksokol/myreader.git"
        property "sonar.testExecutionReportPaths", ["${project(':myreader-frontend').buildDir}/TESTS.xml"]
    }
}

project(':myreader-frontend') {
    sonarqube {
        properties {
            property "sonar.sources", "${projectDir}/src/app/js"
            property "sonar.exclusions", ["**/*.spec.js", "**/test-utils.js"]
            property "sonar.tests", ["${projectDir}/src/app/js"]
            property "sonar.test.inclusions", ["**/*.spec.js"]
            property "sonar.javascript.lcov.reportPaths", "${buildDir}/reports/coverage/lcov.info"
            property "sonar.eslint.reportPaths", "${buildDir}/reports/eslint.json"
        }
    }
}

ext.resolveDependencies = {project ->
    def resolve = {configuration ->
        def nonResolveableConfigurations = ['apiElements', 'implementation',
                                            'runtimeElements', 'runtimeOnly',
                                            'testImplementation', 'testRuntimeOnly',
                                            'generatedImplementation', 'generatedRuntimeOnly']

        if (!nonResolveableConfigurations.contains(configuration.getName())) {
            configuration.resolve()
        }
    }

    project.buildscript.configurations.each { configuration -> resolve(configuration) }
    project.configurations.each { configuration -> resolve(configuration) }
}
