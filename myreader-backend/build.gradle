plugins {
  id "jacoco"
  id "org.springframework.boot" version "2.6.1"
  id "org.owasp.dependencycheck" version "5.3.2.1"
  id "com.github.psxpaul.execfork" version "0.1.15"
  id "com.github.spotbugs" version "4.4.4"
}

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'pmd'
apply plugin: 'project-report'

repositories {
  mavenCentral()
}

def javaLangVersion = JavaVersion.VERSION_11
def romeToolsVersion = '1.16.0'
def commonsIoVersion = '2.6'
def commonsTextVersion = '1.6'
def htmlSanitizerVersion = '20211018.2'

dependencies {
  implementation('org.springframework.boot:spring-boot-starter-web') {
    exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-websocket'
  }
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
  implementation 'org.hsqldb:hsqldb'
  implementation 'org.flywaydb:flyway-core'
  implementation "com.rometools:rome:${romeToolsVersion}"
  implementation "com.rometools:rome-modules:${romeToolsVersion}"
  implementation "commons-io:commons-io:${commonsIoVersion}"
  implementation "org.apache.commons:commons-text:${commonsTextVersion}"
  implementation "com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:${htmlSanitizerVersion}"
  implementation "org.apache.httpcomponents:httpclient"

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
}

spotbugs {
  excludeFilter = file("$projectDir/spotbugs-excludes.xml")
}

spotbugsMain {
  reports {
    xml.enabled = true
    html.enabled = true
  }
}

spotbugsTest {
  reports {
    xml.enabled = true
    html.enabled = true
  }
}

compileJava {
  targetCompatibility = javaLangVersion
  sourceCompatibility = javaLangVersion
}

pmd {
  ruleSets = []
  ruleSetConfig = resources.text.fromFile("$projectDir/pmd-rulesets.xml")
}

bootJar {
  archiveFileName = 'myreader.jar'
}

jacocoTestReport {
  reports {
    html.enabled = true
    xml.enabled = true
  }
}

springBoot {
  buildInfo()
}

dependencyCheck {
  failBuildOnCVSS = 7
  analyzers {
    jarEnabled = false
  }
}

task devRun(type: com.github.psxpaul.task.ExecFork) {
  def withAppTasks = project.hasProperty('withAppTasks') as String

  environment << ['TASK_ENABLED': withAppTasks]
  commandLine '../gradlew'
  args = ['bootRun']
  waitForOutput 'Started Starter'
}

test {
  dependsOn 'cleanTest' // always run the tests in the same order
  useJUnitPlatform()
  testLogging {
    exceptionFormat = 'full'

    events = ["failed", "passed", "skipped", "standardOut", "standardError"]
  }
}
